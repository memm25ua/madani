---
const textoCompleto = `ðŸ‘‹ Soy Madani, de Elche (orgullosamente ilicitano ðŸ˜Ž). La tecnologÃ­a es mi lenguaje favorito desde que tengo memoria, y disfruto cada parte del desarrollo: frontend, backend, mobileâ€¦ Â¡todo me interesa!

Donde realmente vibro es creando interfaces y experiencias que marcan la diferencia para las personas. EstudiÃ© en la Universidad de Alicante y mi meta es disfrutar del proceso mientras hago la web mÃ¡s bonita y divertida para todos.`;
---

<section id="info" class="info-animada">
    <div class="animated-copy">
        {
            textoCompleto.split("\n").map((parrafo, i) => (
                <>
                    <p>{parrafo}</p>
                    <br />
                </>
            ))
        }
    </div>
</section>

<style>
    #info {
        padding: 10em 2em;
        color: #fff;
        display: flex;
        flex-direction: column;
        gap: 2.5rem;
        justify-content: center;
        align-items: center;
    }

    .animated-copy,
    .animated-copy p {
        font-size: 1.3rem !important;
        line-height: 1.7;
        max-width: 700px;
        color: #bbb;
        letter-spacing: 0.01em;
        margin: 0 auto;
        text-align: center;
        /* Optional: smooth out character appearance */
        overflow-wrap: break-word;
        word-break: break-word;
    }
    .char {
        display: inline-block;
        white-space: pre;
        will-change: opacity, transform, color;
    }

    @media (max-width: 600px) {
        #info {
            padding: 6em 0.5em;
        }
        .animated-copy {
            font-size: 1.02rem;
            padding-left: 0.2em;
            padding-right: 0.2em;
        }
    }
</style>

<script>
    import gsap from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    import { SplitText } from "gsap/SplitText";

    gsap.registerPlugin(ScrollTrigger, SplitText);

    // SÃ³lo afecta al conjunto entero, no a pÃ¡rrafos por separado
    const el = document.querySelector(".animated-copy");
    if (el) {
        const split = SplitText.create(el, {
            type: "chars",
            charsClass: "char",
        });
        const chars = split.chars;

        gsap.set(chars, { color: "#646464", opacity: 1 });

        let lastProgress = 0;
        let colorTimers = new Map();
        let completed = new Set();

        ScrollTrigger.create({
            trigger: el,
            start: "top 90%",
            end: "top 10%",
            scrub: 1,
            onUpdate: (self) => {
                const progress = self.progress;
                const totalChars = chars.length;
                const goingDown = progress >= lastProgress;
                const currIdx = Math.floor(progress * totalChars);

                chars.forEach((char, idx) => {
                    if (!goingDown && idx >= currIdx) {
                        if (colorTimers.has(idx)) {
                            clearTimeout(colorTimers.get(idx));
                            colorTimers.delete(idx);
                        }
                        completed.delete(idx);
                        gsap.set(char, { color: "#646464" });
                        return;
                    }

                    if (completed.has(idx)) {
                        return;
                    }

                    if (idx <= currIdx) {
                        gsap.set(char, { color: "#abff02" });
                        if (!colorTimers.has(idx)) {
                            const timer = setTimeout(() => {
                                if (!completed.has(idx)) {
                                    gsap.to(char, {
                                        duration: 0.12,
                                        ease: "none",
                                        color: "#fff",
                                        onComplete: () => {
                                            completed.add(idx);
                                        },
                                    });
                                }
                                colorTimers.delete(idx);
                            }, 100);
                            colorTimers.set(idx, timer);
                        }
                    } else {
                        gsap.set(char, { color: "#646464" });
                    }
                });

                lastProgress = progress;
            },
            onLeaveBack: () => {
                colorTimers.forEach((timer) => clearTimeout(timer));
                colorTimers.clear();
                completed.clear();
                gsap.set(chars, { color: "#dddddd" });
            },
        });
    }
</script>
